{"version":3,"sources":["constants.js","serviceWorker.js","index.js","aux.js","App.js"],"names":["__webpack_require__","d","__webpack_exports__","ENTITIES","CORE","ACTION","SIDE_CORE","AREAS","BUDGET","CANCEL","EXCLUDE","EXTRAS","FOOD_CATEGORY","FOOD_CUSINES","INCLUDE","POPULAR","RECAP","REQUEST","REQUEST_ADD","REQUEST_REMOVE","RESTAURANT","SIZE","AFTER_CORE","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","aux","props","children","state","tuplePhrases","showPhrases","lines","lineIndex","entityIndex","newEntityKey","handleInputChange","event","_this","setState","target","value","getChangedEntity","newEntity","updateEntity","getChangedIndex","removeEntity","line","Object","_home_shorbagy_work_botit_ui_train_text_train_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","splice","phrase","entities","originalPhrase","length","_loop","j","entity","start","end","entityName","token","substring","slice","tokenWithEntity","react__WEBPACK_IMPORTED_MODULE_7___default","style","backgroundColor","cursor","onClick","push","togglePhrases","tuple2Arrays","prevState","_home_shorbagy_work_botit_ui_train_text_train_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","getEntitesFromPhrase","_loop2","i","entites","_loop3","tuples","replace","result","eval","arrays2Tuples","array","container","outerComma","_loop4","tuple","innerTuple","concat","qoutedString","Entites","forEach","el","index","innerComma","tempString","reduce","acc","elm","idx","term","handleEditChange","console","group","log","textContent","groupEnd","saveFile","text","blob","Blob","type","saveAs","renderPhrases","className","map","_aux__WEBPACK_IMPORTED_MODULE_10__","key","contentEditable","name","suppressContentEditableWarning","onFocus","e","persist","out","keys","this","placeholder","onChange","Component"],"mappings":"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","file":"static/js/main.02f27a5e.chunk.js","sourcesContent":["export const ENTITIES = {\n    'CORE': '#AE8CA3',\n    'ACTION': '#9EE493',\n    'SIDE_CORE': '#40798C',\n    'AREAS': '#D17A22',\n    'BUDGET': '#3498db',\n    'CANCEL': '#c0392b',\n    'EXCLUDE': '#76BED0',\n    'EXTRAS': '#FFA69E',\n    'FOOD_CATEGORY': '#6DAEDB',\n    'FOOD_CUSINES': '#EFD0CA',\n    'INCLUDE': '#FE938C',\n    'POPULAR': '#192BC2',\n    'RECAP': '#ED474A',\n    'REQUEST': '#E0C879',\n    'REQUEST_ADD': '#2ecc71',\n    'REQUEST_REMOVE': '#e74c3c',\n    'RESTAURANT': '#AEADF0',\n    'SIZE': '#F0BCD4',\n    'AFTER_CORE': '#6c5ce7'\n};","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const aux = (props) => props.children;\n\nexport default aux;","import React, { Component } from 'react';\nimport { ENTITIES } from './constants'\nimport './App.css';\nimport Aux from './aux';\nimport saveAs from 'file-saver';\nclass App extends Component {\n  state = {\n    tuplePhrases: '',\n    showPhrases: false,\n    lines: [],\n    lineIndex: -1,\n    entityIndex: -1,\n    newEntityKey: null\n  }\n\n\n  handleInputChange = (event) => {\n    this.setState({\n      tuplePhrases: event.target.value\n    });\n  }\n\n  getChangedEntity = (newEntity) => {\n    this.setState({\n      newEntityKey: newEntity\n    }, () => {\n      this.updateEntity();\n    })\n  }\n\n  getChangedIndex = (lineIndex, entityIndex) => {\n    this.setState({\n      lineIndex: lineIndex,\n      entityIndex: entityIndex\n    })\n  }\n\n\n  removeEntity = () => {\n    let line = [...this.state.lines[this.state.lineIndex]];\n    let lines = [...this.state.lines];\n    line[1]['entities'].splice(this.state.entityIndex, 1);\n\n    lines[this.state.lineIndex] = line;\n\n    this.setState({\n      lines: lines\n    })\n\n\n  }\n\n  updateEntity = () => {\n    let line = [...this.state.lines[this.state.lineIndex]];\n\n    let phrase = line[0];\n    let entities = line[1]['entities']; // Array\n    let originalPhrase = line[2];\n    line[3] = [];\n    line[4] = false;\n    if (entities && entities.length) { // Exist\n      entities[this.state.entityIndex][2] = this.state.newEntityKey;\n      for (let j = 0; j < entities.length; j++) {\n        let entity = entities[j];\n\n        /**\n         * 0 => Start\n         * 1 => End\n         * 2 => Entity Name\n         */\n        let start = entity[0];\n        let end = entity[1];\n        let entityName = entity[2];\n        let token = originalPhrase.substring(start, end);\n        phrase = phrase.slice(end);\n        let tokenWithEntity =\n          (<span\n            entity={entityName}\n            style={{\n              backgroundColor: ENTITIES[entityName],\n              cursor: 'pointer'\n            }}\n            onClick={() => this.getChangedIndex(this.state.lineIndex, j)}>\n            {token}\n          </span>);\n        line[3].push(tokenWithEntity);\n      }\n      line[3].push(phrase);\n    }\n\n\n    let lines = [...this.state.lines];\n\n    lines[this.state.lineIndex] = line;\n\n    this.setState({\n      lines: lines\n    })\n\n  }\n\n  togglePhrases = () => {\n    const lines = this.tuple2Arrays(this.state.tuplePhrases);\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        showPhrases: true,\n        lines: lines\n      }\n    });\n  }\n\n\n  getEntitesFromPhrase = (lines) => {\n    for (let i = 0; i < lines.length; i++) {\n      let phrase = lines[i][0];\n      let entites = lines[i][1]['entities']; // Array\n      lines[i][2] = phrase;\n      let originalPhrase = lines[i][2]; // original phrase\n      lines[i][3] = []; // output content\n      if (entites && entites.length) { // Exist\n        for (let j = 0; j < entites.length; j++) {\n          let entity = entites[j];\n          /**\n           * 0 => Start\n           * 1 => End\n           * 2 => Entity Name\n           */\n          let start = entity[0];\n          let end = entity[1];\n          let entityName = entity[2];\n          let token = originalPhrase.substring(start, end);\n          phrase = phrase.slice(end);\n          let tokenWithEntity =\n            (<span\n              entity={entityName}\n              style={{\n                backgroundColor: ENTITIES[entityName],\n                cursor: 'pointer'\n              }}\n              onClick={() => this.getChangedIndex(i, j)}>\n              {token}\n            </span>);\n          lines[i][3].push(tokenWithEntity);\n        }\n        lines[i][3].push(phrase);\n      }\n    }\n\n  }\n\n  tuple2Arrays = (tuples) => {\n    tuples = tuples.replace(/\\(/g, '[').replace(/\\)/g, ']');\n    let result = eval(tuples);\n    return result;\n  }\n\n  arrays2Tuples = (array) => {\n    let container = '[';\n    let outerComma = ',';\n    for (let i = 0; i < array.length; i++) {\n      let tuple = array[i];\n      let innerTuple = `(${this.qoutedString(tuple[0])},`; // Phrase\n\n      let Entites = '';\n      tuple[1]['entities'].forEach((el, index) => {\n        let innerComma = ',';\n        let tempString = el.reduce((acc, elm, idx) => {\n          return idx === 0 ? this.qoutedString(elm) : acc + ', ' + this.qoutedString(elm);\n        }, '');\n        if (index === (tuple[1]['entities'].length - 1)) { // For concat inner tuples inside entities\n          innerComma = '';\n        }\n        Entites += `(${tempString})${innerComma}`;\n      });\n\n      Entites = `{ 'entities': [${Entites}] }`;\n      innerTuple += `${Entites})`;\n\n      if (i === array.length - 1) {\n        outerComma = '';\n      }\n      container += `${innerTuple}${outerComma}`\n    }\n\n    container += ']';\n    return container;\n  }\n\n  qoutedString = (term) => {\n    if (typeof term === 'string') {\n      return `'${term}'`;\n    }\n    return term;\n  }\n\n  handleEditChange = (event, index) => {\n    console.group('text');\n    console.log('New Data : ', event.target.textContent);\n    console.groupEnd();\n    // let newData = event.target.textContent;\n    // let line = [...this.state.lines[index]];\n    // let lines = [...this.state.lines];\n    // line[0] = newData;\n    // line[2] = newData;\n    // line[3] = [];\n    // let phrase = line[0];\n    // let originalPhrase = line[2];\n    // let entities = line[1]['entities'];\n    // if (entities && entities.length) { // Exist\n    //   for (let j = 0; j < entities.length; j++) {\n    //     let entity = entities[j];\n    //     /**\n    //      * 0 => Start\n    //      * 1 => End\n    //      * 2 => Entity Name\n    //      */\n    //     let start = entity[0];\n    //     let end = entity[1];\n    //     let entityName = entity[2];\n    //     let token = originalPhrase.substring(start, end);\n    //     phrase = phrase.slice(end);\n    //     let tokenWithEntity =\n    //       (<span\n    //         entity={entityName}\n    //         style={{\n    //           backgroundColor: ENTITIES[entityName],\n    //           cursor: 'pointer'\n    //         }}\n    //         onClick={() => this.getChangedIndex(index, j)}>\n    //         {token}\n    //       </span>);\n    //     line[3].push(tokenWithEntity);\n    //   }\n    //   line[3].push(phrase);\n    // }\n    // lines[index] = line;\n\n    // this.setState({\n    //   lines: lines\n    // });\n  }\n\n\n  saveFile = () => {\n    let lines = [...this.state.lines];\n    let text = this.arrays2Tuples(lines);\n\n    let blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n    saveAs(blob, \"data.txt\");\n  }\n\n  renderPhrases = () => {\n    return (<div className=\"container field\">\n\n      {\n        this.state.lines.map((line, idx) => {\n          return (\n            <Aux key={idx}>\n              <div type=\"text\" className=\"form-control\" contentEditable name=\"phrase\" suppressContentEditableWarning={true} onFocus={(e) => {\n                e.persist();\n                this.handleEditChange(e, idx);\n                // console.log(e.target.value);\n              }}>\n                {line[3].map((out, index) => (\n                  <Aux key={index}>\n                    {out}\n                  </Aux>\n                ))\n                }\n              </div>\n              {\n                this.state.lineIndex === idx ?\n                  (\n                    <div className=\"card bg-light entities\">\n                      {\n                        Object.keys(ENTITIES).map((entity, key) => {\n                          return (\n                            <div className=\"entity\" style={{\n                              backgroundColor: ENTITIES[entity]\n                            }} key={key}\n                              onClick={() => this.getChangedEntity(entity)}>\n                              {entity}\n                            </div>)\n\n                        })\n                      }\n                      <button className=\"btn btn-danger\" onClick={this.removeEntity}>Remove Entity</button>\n                    </div>\n                  )\n                  : null\n              }\n            </Aux>\n          )\n\n        })\n      }\n    </div>)\n  }\n\n  render() {\n    if (this.state.showPhrases) {\n      this.getEntitesFromPhrase(this.state.lines);\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <input type=\"text\" placeholder=\"tuple\" onChange={this.handleInputChange} className=\"form-control\" />\n          <div className=\"row\">\n            <div className=\"btns\">\n              <button className=\"btn btn-primary\" onClick={this.togglePhrases}>Submit</button>\n              <button className=\"btn btn-success\" onClick={this.saveFile}>Save</button>\n            </div>\n          </div>\n          <hr />\n          {\n            this.state.showPhrases ? this.renderPhrases() : null\n          }\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}